// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  password     String
  firstName    String
  lastName     String
  image        String?
  role         Role          @default(user)
  playSessions PlaySession[]
}

enum Role {
  user
  gm
}

model PlaySession {
  id            Int                   @id @default(autoincrement())
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  createAt      DateTime              @default(now())
  gameMode      GameMode
  totalScore    Int                   @default(0)
  answers       PlayAnswer[]
  questions     PlaySessionQuestion[]
  Category      Category?             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    Int?
  isFinished    Boolean               @default(false)
  isTestSession Boolean               @default(false)
}

model ChoiceQuestion {
  id           Int                   @id @default(autoincrement())
  gameMode     GameMode              @default(choice)
  content      String
  mediaType    MediaType
  mediaUrl     String?
  maxScore     Int
  createAt     DateTime              @default(now())
  updateAt     DateTime              @updatedAt
  choices      Choice[]
  category     Category?             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   Int
  playSessions PlaySessionQuestion[]
  PlayAnswer   PlayAnswer[]
}

enum GameMode {
  choice
  clue
  imageTile
}

model PlaySessionQuestion {
  playSession   PlaySession    @relation(fields: [playSessionId], references: [id], onDelete: Cascade)
  playSessionId Int
  question      ChoiceQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId    Int
  assignedAt    DateTime       @default(now())

  @@id([playSessionId, questionId])
}

model PlayAnswer {
  id            Int            @id @default(autoincrement())
  playSession   PlaySession    @relation(fields: [playSessionId], references: [id], onDelete: Cascade)
  playSessionId Int
  question      ChoiceQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId    Int
  isCorrect     Boolean
  scoreEarned   Int            @default(0)
  Choice        Choice?        @relation(fields: [choiceId], references: [id], onDelete: Cascade)
  choiceId      Int?
}

model Choice {
  id               Int            @id @default(autoincrement())
  choiceText       String
  isCorrect        Boolean
  choiceQuestion   ChoiceQuestion @relation(fields: [choiceQuestionId], references: [id], onDelete: Cascade)
  choiceQuestionId Int
  playAnswer       PlayAnswer[]
}

model Category {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String
  imageUrl        String?
  choiceQuestions ChoiceQuestion[]
  playSession     PlaySession[]
}

enum MediaType {
  image
  video
  sound
  none
}
